feat: implement Docker containerization with Node.js backend and PDF generation

🚀 Major Changes:
- Add complete Docker containerization (Dockerfile, docker-compose.yml)
- Implement Express.js backend server with API endpoints
- Add PDF generation functionality using Playwright
- Configure static port 3001 across all services
- Add comprehensive development and production environments

🔧 Backend Implementation:
- Express.js server with static file serving
- RESTful API endpoints (/api/data, /health, /api/generate-pdf)
- Playwright integration for PDF generation with system Chromium
- Environment variable configuration support

🌐 Frontend Enhancements:
- Add PDF download button with loading states
- Implement API integration with fallback to static files
- Maintain backward compatibility with existing CV design
- Add error handling for network requests

🐳 Docker Configuration:
- Optimized Alpine Linux base image with Node.js 18
- Multi-stage build capability with security hardening
- Non-root user execution for enhanced security
- Development override with hot-reload and volume mounting
- Nginx reverse proxy configuration for production

📁 Project Structure:
- Add package.json with comprehensive dependency management
- Create development scripts and testing utilities
- Implement proper .gitignore and .dockerignore
- Add comprehensive documentation and usage guides

✅ Quality Assurance:
- All endpoints tested and validated (health, API, PDF, main app)
- Container health checks implemented
- Error handling and graceful fallbacks
- Cross-platform compatibility ensured

🌟 Production Ready:
- Cloud platform deployment ready (AWS, GCP, Azure, Heroku)
- Environment-specific configurations
- Security best practices implemented
- Performance optimizations applied

Breaking Changes: None - maintains full backward compatibility
Testing: Comprehensive endpoint testing script included
Documentation: Updated README.md with Docker instructions

Co-authored-by: GitHub Copilot Assistant
